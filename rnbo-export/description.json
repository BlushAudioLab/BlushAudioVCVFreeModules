{
  "parameters": [
    {
      "type": "ParameterTypeNumber",
      "index": 0,
      "name": "saturation",
      "paramId": "saturation",
      "minimum": 0,
      "maximum": 2,
      "exponent": 1,
      "steps": 0,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s03",
      "constrainFunc": "param_01_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 1,
      "name": "input_gain",
      "paramId": "input_gain",
      "minimum": 0,
      "maximum": 10,
      "exponent": 1,
      "steps": 0,
      "initialValue": 5,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s04",
      "constrainFunc": "param_02_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 2,
      "name": "boost",
      "paramId": "boost",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0.5,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s01",
      "constrainFunc": "param_03_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 3,
      "name": "expansion",
      "paramId": "expansion",
      "minimum": 50,
      "maximum": 5000,
      "exponent": 1,
      "steps": 0,
      "initialValue": 2500,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s02",
      "constrainFunc": "param_04_value_constrain"
    }
  ],
  "numParameters": 4,
  "numSignalInParameters": 0,
  "numSignalOutParameters": 0,
  "numInputChannels": 1,
  "numOutputChannels": 1,
  "numMidiInputPorts": 0,
  "numMidiOutputPorts": 0,
  "externalDataRefs": [],
  "patcherSerial": 0,
  "inports": [],
  "outports": [],
  "inlets": [
    {
      "type": "signal",
      "index": 1,
      "tag": "in1",
      "meta": ""
    }
  ],
  "outlets": [
    {
      "type": "signal",
      "index": 1,
      "tag": "out1",
      "meta": ""
    }
  ],
  "paramConversion": {
    "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
    "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 2 ? 2 : value));\n            let normalizedValue = (value - 0) / (2 - 0);\n            return normalizedValue;\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 10 ? 10 : value));\n            let normalizedValue = (value - 0) / (10 - 0);\n            return normalizedValue;\n        }\n    case 3:\n        {\n            value = (value < 50 ? 50 : (value > 5000 ? 5000 : value));\n            let normalizedValue = (value - 50) / (5000 - 50);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
    "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (2 - 0);\n            }\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (10 - 0);\n            }\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 50 + value * (5000 - 50);\n            }\n        }\n    default:\n        return value;\n    }\n}",
    "getNumParameters": "function getNumParameters() {\n    return 4;\n}",
    "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 2 ? 2 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 10 ? 10 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 5000 ? 5000 : (v < 50 ? 50 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
    "subpatches": {},
    "isPolyphonic": false
  },
  "presetid": "rnbo",
  "meta": {
    "architecture": "x64",
    "filename": "crunch.maxpat",
    "maxversion": "8.5.1",
    "rnboversion": "1.0.1"
  }
}